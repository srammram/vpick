var express = require('express');
var app = express();
var http = require('http').Server(app);
var io = require('socket.io')(http);
var schedule = require('node-schedule');
var mysql = require("mysql");

var port = process.env.PORT || 9000;

var pool   = mysql.createPool({
  connectionLimit : 100000,
  host     : 'localhost',
  user     : 'root',
  password : 'ZIpMXQ',
  //password : '',
  database : 'kapp_new'
});

var ride_later = schedule.scheduleJob('1 * * * * *', function(){
	  console.log('The answer to life, the universe, and everything!');
	 /* var today = new Date();
		var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
		var time = today.getHours() + ":" + today.getMinutes() + ":00";
		var dateTime = date+' '+time;
		
	  pool.query("INSERT INTO kapp_ride_later  (ride_id, later_status, timing) VALUES (1,1, '"+dateTime+"') " , function (error){
		if(error){
			console.log('Not Insert');
			return;
		}
		console.log('Inserted');
	});*/
});

io.sockets.on('connection', function (socket){
	
	
	
	socket.on('user_socket', (data, callback) => {
		console.log('User Socket');
		var user_id = data.user_id;
		var device_imei = data.device_imei;
		var user_type = data.user_type;
		var device_token = data.device_token;
		var socket_id = socket.id;	
			
		var table_name = 'kapp_users';
		
		if(user_id == '' || device_token == '' || user_type == ''){
			console.log('Mandotory fields missing');
			return;
		}else{
			 pool.query("SELECT u.id, u.oauth_token, us.socket_id FROM "+table_name+" AS u LEFT JOIN kapp_user_socket AS us ON us.user_id = u.id AND user_type = "+user_type+" WHERE u.oauth_token = '"+device_token+"' ", function (error, results, fields){
				
				if(error){
					console.log('Data is empty');
					//return;
				}
				console.log(results);
				
				if(results.length === 0){
					console.log('empty user');
					var responseData = 'user_truncate';
					return callback(responseData);
				}else{
					console.log('not empty user');
					if(results[0].socket_id != null){
						
						pool.query("UPDATE kapp_user_socket SET device_token = '"+device_token+"',socket_id = '"+socket_id+"' WHERE user_id = '"+user_id+"' AND device_imei = '"+device_imei+"' AND user_type = '"+user_type+"' " , function (error){
							if(error){
								console.log('Not Updated');
								return;
							}
							console.log('Updated');
						});
					}else{
						pool.query("INSERT INTO kapp_user_socket  (user_id, user_type, socket_id, device_imei, device_token) VALUES ('"+user_id+"', '"+user_type+"', '"+socket_id+"', '"+device_imei+"', '"+device_token+"') " , function (error){
							if(error){
								console.log('Not Insert');
								return;
							}
							console.log('Inserted');
						});
					}
					
					pool.query("UPDATE kapp_users SET device_imei = '"+device_imei+"' WHERE user_id = '"+user_id+"'  " , function (error){
							if(error){
								console.log('User Not Updated');
								return;
							}
							console.log('User Updated');
						});
						
						
					var responseUData = 'user_success';
					return callback(responseUData);
				}
				
			});
		}
	});
	
	socket.on('notification', function(data){
		console.log('Notification');
		socket.emit('notification', data);
	});
	
	socket.on('server_reached_destination', function(data){
		console.log('Server Reached Destination');
		socket.to(data.socket_id).emit('driver_reached_destination', data);
	});
	
	socket.on('server_ride_complete', function(data){
		console.log('Server Ride Complete');
		socket.to(data.socket_id).emit('driver_ride_complete', data);
	});
	
	socket.on('server_ride_cancel', function(data){
		console.log('Server Ride Cancel');
		socket.to(data.socket_id).emit('driver_ride_cancel', data );
	});
	
	socket.on('server_chat_join', function(data){
		console.log('Server Chat Join');
		socket.to(data.driver_socket_id).emit('driver_user_join', data.driver_name );
		socket.to(data.customer_socket_id).emit('customer_user_join', data.customer_name );
	});
	
	socket.on('server_chat_complete', function(data){
		console.log('Server Chat Complete');
		socket.to(data.driver_socket_id).emit('driver_chat_complete', data.driver_name );
		socket.to(data.customer_socket_id).emit('customer_chat_complete', data.customer_name );
	});
	
	socket.on('server_booking_accept', function(data){
		console.log('Server Booking Accepts');
		console.log(data.socket_id);
		socket.to(data.socket_id).emit('driver_accept_ride', data );
	});
	
	socket.on('server_booking_checking', function(data){
		console.log('Server Booking Checking');
		console.log(data.socket_id);
		socket.to(data.socket_id).emit('driver_available_check', data);
	});
	
	socket.on('new_message', function(data){
		console.log('New Message');
		var new_msg = data.msg;
	    var ride_id = data.ride_id;
		var user_type = data.user_type;
		var today = new Date();
		var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
		var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
		var dateTime = date+' '+time;
		if(new_msg == '' || ride_id == '' || user_type == ''){
			console.log('Mandotory fields missing');
			return;
		}else{
			pool.query("SELECT r.id, r.driver_id, r.customer_id, d.socket_id AS driver_socket_id, c.socket_id AS customer_socket_id FROM kapp_rides AS r LEFT JOIN kapp_user_socket AS d ON d.user_id = r.driver_id LEFT JOIN kapp_user_socket AS c ON c.user_id = r.customer_id  WHERE r.id = '"+ride_id+"' ", function (error, results, fields){
				if(error){
					console.log('Data is empty');
					return;
				}
				
				if(user_type == 1){
					pool.query("INSERT INTO kapp_chat_ride  (user_id, user_type, ride_id, chat_message, chat_date) VALUES ('"+results[0].customer_id+"', '"+user_type+"', '"+ride_id+"', '"+new_msg+"', '"+dateTime+"') ");
					socket.to(results[0].driver_socket_id).emit('recived_message', data );
				}else if(user_type == 2){
					pool.query("INSERT INTO kapp_chat_ride  (user_id, user_type, ride_id, chat_message, chat_date) VALUES ('"+results[0].driver_id+"', '"+user_type+"', '"+ride_id+"', '"+new_msg+"', '"+dateTime+"') ");
					socket.to(results[0].customer_socket_id).emit('recived_message', data );	
				}
				
			});
		}
	});
		
	socket.on('driver_location', function(data){
		console.log('driver_location');
		var oauth_token = data.oauth_token;
		var latitude = data.latitude;
		var longitude = data.longitude;
		console.log(latitude);
		console.log(longitude);
		
		if(oauth_token == '' || latitude == '' || longitude == ''){
			console.log('Mandotory fields missing');
			return;
		}else{
			
						
			pool.query("SELECT d.id, r.start_lat, r.start_lng, r.end_lat, r.end_lng, r.customer_id, r.id AS ride_id, df.location, r.status, us.socket_id, us.id AS usid FROM kapp_users AS d LEFT JOIN kapp_rides AS r ON r.driver_id = d.id AND (r.status = 2 OR  r.status = 3) LEFT JOIN kapp_driver_frequency AS df ON df.ride_id = ride_id AND df.driver_id = d.id LEFT JOIN kapp_user_socket AS us ON us.user_id = r.customer_id AND us.user_type = 1 WHERE d.oauth_token = '"+oauth_token+"' ORDER BY usid DESC LIMIT 1", function (error, results, fields){
				if(error){
					
					console.log('Data is empty');
					return;
				}
				
				if(results[0].ride_id != null){
					
					
					
					if(results[0].location != null){
						var object2 = [[results[0].location], [latitude, longitude, results[0].status]]; 
						
						pool.query("UPDATE kapp_driver_frequency SET location = '"+object2+"'  WHERE ride_id = '"+results[0].ride_id+"' AND driver_id = '"+results[0].id+"'  " );
						console.log("Ride Updated");
					}else{
						var object1 = [[latitude, longitude, results[0].status]]; 
						
						pool.query("INSERT INTO kapp_driver_frequency  (driver_id, ride_id, location) VALUES ('"+results[0].id+"', '"+results[0].ride_id+"', '"+object1+"') ");
						console.log("Ride Insert");
					}		
								
					pool.query("UPDATE kapp_driver_current_status SET current_latitude = '"+latitude+"',current_longitude = '"+longitude+"' WHERE allocated_status = 1 AND driver_id="+results[0].id );
					console.log("Location Ride Updated");
					
					var actual_lat = 0;
					var actual_lng = 0;
					pool.query("SELECT a.latitude, a.longitude  FROM kapp_ride_route AS a WHERE a.ride_id = '"+results[0].ride_id+"' LIMIT 1", function (error, act_results_, fields){
						
						actual_lat =  act_results_[0].latitude;
						actual_lng =  act_results_[0].longitude;
						
					});
					
					var cus_ride_id = results[0].ride_id;
					var cus_lat = latitude;
					var cus_lng = longitude;
					var cus_pickup_lat = results[0].start_lat ? results[0].start_lat : 0;
					var cus_pickup_lng = results[0].start_lng ? results[0].start_lng : 0;
					var cus_drop_lat = results[0].end_lat ? results[0].end_lat : 0;
					var cus_drop_lng = results[0].end_lng ? results[0].end_lng : 0;
					var cus_actual_lat = actual_lat ? actual_lat : 0;
					var cus_actual_lng = actual_lng ? actual_lng : 0;
					
					socket.to(results[0].socket_id).emit('get_driver_location', { ride_id: cus_ride_id, lat: cus_lat, lng: cus_lng, pickup_lat: cus_pickup_lat, pickup_lng: cus_pickup_lng, drop_lat: cus_drop_lat, drop_lng: cus_drop_lng, actual_lat: cus_actual_lat, actual_lng: cus_actual_lng });
					
					var admin_driver_id = results[0].id;
					var admin_ride_id = results[0].ride_id;
					var admin_lat = latitude;
					var admin_lng = longitude;
					
					
					
					socket.emit('admin_drivers', {admin_driver_id: admin_driver_id, admin_ride_id: admin_ride_id, admin_lat: admin_lat, admin_lng: admin_lng });
					
				}else{
					var admin_driver_id1= results[0].id;
					var admin_ride_id1 = 0;
					var admin_lat1 = latitude;
					var admin_lng1 = longitude;
					socket.emit('admin_drivers', {admin_driver_id: admin_driver_id1, admin_ride_id: admin_ride_id1, admin_lat: admin_lat1, admin_lng: admin_lng1 });
					
					pool.query("UPDATE kapp_driver_current_status SET current_latitude = '"+latitude+"',current_longitude = '"+longitude+"' WHERE allocated_status = 1 AND driver_id="+results[0].id );
					console.log("Location Updated");
				}
				
			});
		}
	})
	
	
	/*socket.on('get_driver_latlng', (data, callback) => {
		
		var oauth_token = data.oauth_token; 
		if(oauth_token == ''){
			console.log('Mandotory fields missing');
			var responseData = 'driver_empty';
			return callback(responseData);
		}else{
			 pool.query("SELECT c.id AS id,  r.id as ride_id, d.current_latitude, d.current_longitude FROM kapp_customers AS c LEFT JOIN kapp_rides AS r ON r.customer_id = c.id LEFT JOIN kapp_drivers AS d ON d.id = r.driver_id  WHERE c.oauth_token = '"+oauth_token+"' ORDER BY ride_id DESC LIMIT 1 ", function (error, results, fields){
				 
				 if(error){
					console.log('Data is empty');
					//return;
				}
				console.log(results);
				
				if(results.length === 0){
					console.log('empty user');
					var responseData1 = 'driver_empty';
					return callback(responseData1);
				}else{
					if(results[0].current_latitude != null && results[0].current_longitude != null){
						console.log('driver_user');
						var responseData2 = {current_latitude: results[0].current_latitude, current_longitude: results[0].current_longitude};
						return callback(responseData2);
					}else{
						console.log('driver_empty');
						var responseData3 = 'driver_empty';
						return callback(responseData3);
					}
					
				}
			 });
		}
		
	});
	
	socket.on('notification', function(data){
		console.log('Notification');
		socket.emit('notification', data);
	});
	
	socket.on('server_reached_destination', function(data){
		console.log('Server Reached Destination');
		socket.to(data.socket_id).emit('driver_reached_destination', data);
	});
	
	socket.on('server_ride_complete', function(data){
		console.log('Server Ride Complete');
		socket.to(data.socket_id).emit('driver_ride_complete', data);
	});
	
	socket.on('server_ride_cancel', function(data){
		console.log('Server Ride Cancel');
		socket.to(data.socket_id).emit('driver_ride_cancel', data );
	});
	
	socket.on('server_chat_join', function(data){
		console.log('Server Chat Join');
		socket.to(data.driver_socket_id).emit('driver_user_join', data.driver_name );
		socket.to(data.customer_socket_id).emit('customer_user_join', data.customer_name );
	});
	
	socket.on('server_chat_complete', function(data){
		console.log('Server Chat Complete');
		socket.to(data.driver_socket_id).emit('driver_chat_complete', data.driver_name );
		socket.to(data.customer_socket_id).emit('customer_chat_complete', data.customer_name );
	});
	
	socket.on('server_booking_accept', function(data){
		console.log('Server Booking Accepts');
		console.log(data.socket_id);
		socket.to(data.socket_id).emit('driver_accept_ride', data );
	});
	
	socket.on('server_booking_checking', function(data){
		console.log('Server Booking Checking');
		console.log(data.socket_id);
		socket.to(data.socket_id).emit('driver_available_check', data);
	});
	
	socket.on('new_message', function(data){
		console.log('New Message');
		var new_msg = data.msg;
	    var ride_id = data.ride_id;
		var user_type = data.user_type;
		var today = new Date();
		var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
		var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
		var dateTime = date+' '+time;
		if(new_msg == '' || ride_id == '' || user_type == ''){
			console.log('Mandotory fields missing');
			return;
		}else{
			pool.query("SELECT r.id, r.driver_id, r.customer_id, d.socket_id AS driver_socket_id, c.socket_id AS customer_socket_id FROM kapp_rides AS r LEFT JOIN kapp_user_socket AS d ON d.user_id = r.driver_id LEFT JOIN kapp_user_socket AS c ON c.user_id = r.customer_id  WHERE r.id = '"+ride_id+"' ", function (error, results, fields){
				if(error){
					console.log('Data is empty');
					return;
				}
				
				if(user_type == 1){
					pool.query("INSERT INTO kapp_chat_ride  (user_id, user_type, ride_id, chat_message, chat_date) VALUES ('"+results[0].customer_id+"', '"+user_type+"', '"+ride_id+"', '"+new_msg+"', '"+dateTime+"') ");
					socket.to(results[0].driver_socket_id).emit('recived_message', data );
				}else if(user_type == 2){
					pool.query("INSERT INTO kapp_chat_ride  (user_id, user_type, ride_id, chat_message, chat_date) VALUES ('"+results[0].driver_id+"', '"+user_type+"', '"+ride_id+"', '"+new_msg+"', '"+dateTime+"') ");
					socket.to(results[0].customer_socket_id).emit('recived_message', data );	
				}
				
			});
		}
	});
		
	socket.on('driver_location', function(data){
		console.log('driver_location');
		var oauth_token = data.oauth_token;
		var latitude = data.latitude;
		var longitude = data.longitude;
		if(oauth_token == '' || latitude == '' || longitude == ''){
			console.log('Mandotory fields missing');
			return;
		}else{
			
						
			pool.query("SELECT d.id, r.customer_id, r.id AS ride_id, r.pickup_lat, r.pickup_lng, r.dropoff_lat, r.dropoff_lng, r.actual_lat, r.actual_lng,  df.location, r.status, us.socket_id, us.id AS usid FROM kapp_drivers AS d LEFT JOIN kapp_rides AS r ON r.driver_id = d.id AND (r.status = 'booked' OR  r.status = 'onride') LEFT JOIN kapp_driver_frequency AS df ON df.ride_id = ride_id AND df.driver_id = d.id LEFT JOIN kapp_user_socket AS us ON us.user_id = r.customer_id AND us.user_type = 1 WHERE d.oauth_token = '"+oauth_token+"' ORDER BY usid DESC LIMIT 1", function (error, results, fields){
				if(error){
					
					console.log('Data is empty');
					return;
				}
				
				if(results[0].ride_id != null){
					if(results[0].location != null){
						var object2 = [[results[0].location], [latitude, longitude, results[0].status]]; 
						
						pool.query("UPDATE kapp_driver_frequency SET location = '"+object2+"'  WHERE ride_id = '"+results[0].ride_id+"' AND driver_id = '"+results[0].id+"'  " );
						console.log("Ride Updated");
					}else{
						var object1 = [[latitude, longitude, results[0].status]]; 
						
						pool.query("INSERT INTO kapp_driver_frequency  (driver_id, ride_id, location) VALUES ('"+results[0].id+"', '"+results[0].ride_id+"', '"+object1+"') ");
						console.log("Ride Insert");
					}					
					pool.query("UPDATE kapp_drivers SET current_latitude = '"+latitude+"',current_longitude = '"+longitude+"' WHERE id="+results[0].id );
					console.log("Location Ride Updated");
					
					var cus_ride_id = results[0].ride_id;
					var cus_lat = latitude;
					var cus_lng = longitude;
					var cus_pickup_lat = results[0].pickup_lat ? results[0].pickup_lat : 0;
					var cus_pickup_lng = results[0].pickup_lng ? results[0].pickup_lng : 0;
					var cus_drop_lat = results[0].dropoff_lat ? results[0].dropoff_lat : 0;
					var cus_drop_lng = results[0].dropoff_lng ? results[0].dropoff_lng : 0;
					var cus_actual_lat = results[0].actual_lat ? results[0].actual_lat : 0;
					var cus_actual_lng = results[0].actual_lng ? results[0].actual_lng : 0;
					
					socket.to(results[0].socket_id).emit('get_driver_location', { ride_id: cus_ride_id, lat: cus_lat, lng: cus_lng, pickup_lat: cus_pickup_lat, pickup_lng: cus_pickup_lng, drop_lat: cus_drop_lat, drop_lng: cus_drop_lng, actual_lat: cus_actual_lat, actual_lng: cus_actual_lng });
					
					var admin_driver_id = results[0].id;
					var admin_ride_id = results[0].ride_id;
					var admin_lat = latitude;
					var admin_lng = longitude;
					
					
					
					socket.emit('admin_drivers', {admin_driver_id: admin_driver_id, admin_ride_id: admin_ride_id, admin_lat: admin_lat, admin_lng: admin_lng });
					
				}else{
					var admin_driver_id1= results[0].id;
					var admin_ride_id1 = 0;
					var admin_lat1 = latitude;
					var admin_lng1 = longitude;
					socket.emit('admin_drivers', {admin_driver_id: admin_driver_id1, admin_ride_id: admin_ride_id1, admin_lat: admin_lat1, admin_lng: admin_lng1 });
					
					pool.query("UPDATE kapp_drivers SET current_latitude = '"+latitude+"',current_longitude = '"+longitude+"' WHERE id="+results[0].id );
					console.log("Location Updated");
				}
				
			});
		}
	});*/
	
});

http.listen(port, function () {
   
    var addr = http.address();
	
    console.log('listening on http://' + addr.address + ':' + addr.port);
	
	
});

/*var http = require('http');

http.createServer(function (req, res) {
  res.socket.setTimeout(10);
  res.socket.once('timeout', function () {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Hello World\n');
  });
}).listen(9000, '192.168.2.6');*/